// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

var isEnterKey = (
    function (e) {
      return e.which === 13;
    }
  );

var Event = /* module */[/* isEnterKey */isEnterKey];

var Element = /* module */[];

var Document = /* module */[];

var Window = /* module */[];

function nbr_voys(str, _i, n) {
  while(true) {
    var i = _i;
    if (str === "") {
      return -1;
    } else if (i === n) {
      return 0;
    } else if (Caml_string.get(str, i) === /* "a" */97 || Caml_string.get(str, i) === /* "e" */101 || Caml_string.get(str, i) === /* "i" */105 || Caml_string.get(str, i) === /* "o" */111 || Caml_string.get(str, i) === /* "y" */121 || Caml_string.get(str, i) === /* "u" */117 || Caml_string.get(str, i) === /* "A" */65 || Caml_string.get(str, i) === /* "E" */69 || Caml_string.get(str, i) === /* "I" */73 || Caml_string.get(str, i) === /* "O" */79 || Caml_string.get(str, i) === /* "Y" */89 || Caml_string.get(str, i) === /* "U" */85) {
      return 1 + nbr_voys(str, i + 1 | 0, n) | 0;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function nbr_space(str, _i, n) {
  while(true) {
    var i = _i;
    if (str === "") {
      return -1;
    } else if (i === n) {
      return 0;
    } else if (Caml_string.get(str, i) === /* " " */32 || Caml_string.get(str, i) === /* "*" */42 || Caml_string.get(str, i) === /* "-" */45 || Caml_string.get(str, i) === /* "+" */43 || Caml_string.get(str, i) === /* "/" */47 || Caml_string.get(str, i) === /* "_" */95) {
      return 1 + nbr_space(str, i + 1 | 0, n) | 0;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function nbr_cons(str) {
  return (str.length - nbr_voys(str, 0, str.length) | 0) - nbr_space(str, 0, str.length) | 0;
}

var a = Caml_array.caml_make_vect(2, 0);

var b = Caml_array.caml_make_vect(1, "");

var cons = Promise.resolve(Caml_array.caml_array_set(a, 0, nbr_cons(Caml_array.caml_array_get(b, 0))));

var voys = Promise.resolve(Caml_array.caml_array_set(a, 1, nbr_voys(Caml_array.caml_array_get(b, 0), 0, Caml_array.caml_array_get(b, 0).length)));

function clicked() {
  console.log("hello");
  return /* () */0;
}

Promise.resolve(Caml_array.caml_array_set(b, 0, document.getElementById("textF").value)).then((function () {
        return Promise.all(/* array */[
                    cons,
                    voys
                  ]);
      }));

var Promise$1 = 0;

exports.Event = Event;
exports.Element = Element;
exports.Document = Document;
exports.Window = Window;
exports.Promise = Promise$1;
exports.nbr_voys = nbr_voys;
exports.nbr_space = nbr_space;
exports.nbr_cons = nbr_cons;
exports.a = a;
exports.b = b;
exports.cons = cons;
exports.voys = voys;
exports.clicked = clicked;
/* isEnterKey Not a pure module */
